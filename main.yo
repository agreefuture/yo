type Array(count: int, backing: int[]);

// TODO make the array automatically grow
impl Array {
    static fn create(): Array {
        val array: Array;

        array = Array::new(0, alloc(3));
        ret array;
    }

    fn add(self: Array, object: int): int {
        self.backing[self.count] = object;
        self.count = self.count + 1;
        ret self.count;
    }

    fn get(self: Array, index: int): int {
        ret self.backing[index];
    }
}

fn f(): int {
    val x: int[];
    val y: int[];

    x = alloc(2);
    y = alloc(2);
    retain(x);
    retain(y);

    x[0] = 1;
    x[1] = 1;

    y[0] = 2;
    y[1] = 2;

    release(x);
    release(y);

    ret 0;
}


fn main(): int {
    f();

    ret 0;
    val array: Array;
    array = Array::create();
    retain(array);

    array.add(10);
    array.add(20);

    val retval: int;
    retval = array.get(1);
    release(array);
    ret retval;

    //ret array.get(1);

}
