{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "Yo",
    "scopeName": "source.yo",
    "patterns": [
        { "include": "#keywords" },
        { "include": "#strings" },
        { "include": "#attributes" },
        { "include": "#self" },
        { "include": "#line_comment" },
        { "include": "#block_comment" },
        {
            "comment": "Number Literal (Binary)",
            "name":"constant.numeric.bin.yo",
            "match": "\\b0b[01]+\\b"
        },
        {
            "comment": "Number Literal (Octal)",
            "name":"constant.numeric.oct.yo",
            "match": "\\b0o[0-7]+\\b"
        },
        {
            "comment": "Number Literal (Decimal)",
            "name":"constant.numeric.dec.yo",
            "match": "\\b[0-9]+\\b"
        },
        {
            "comment": "Number Literal (Hexadecimal)",
            "name":"constant.numeric.hex.yo",
            "match": "\\b0x[0-9a-f]+\\b"
        },
        {
            "comment": "Type Declarations",
            "name":"entity.name.type.yo",
            "match": "\\b(struct|impl)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\b",
            "captures": {
                "1": { "name":"keyword.other.yo" },
                "2": { "name":"entity.name.type.yo" }
            }
        },
        {
            "comment": "Function Declarations",
            "begin": "\\b(fn)\\s+([a-zA-Z_][a-zA-Z_0-9]*)\\b",
            "end": "(->.*)?[{;]",
            "beginCaptures": {
                "1": { "name": "keyword.other.fn.yo" },
                "2": { "name": "entity.name.function.yo" }
            },
            "endCaptures": {
                "1": { "patterns": [{ "include": "#type" }] } 
            },
            "patterns": [
                { "include": "#self" },
                { "include": "#var_decl" },
                { "include": "#type" },
                { "include": "#block_comment" },
                { "include": "#line_comment" }
            ]
        },
        {
            "comment": "Function call",
            "match": "\\b(([a-zA-Z_][a-zA-Z0-9_]*)::)?([a-zA-Z_][a-zA-Z0-9_]*)(<([a-zA-Z_][a-zA-Z0-9_]*)(,\\s*([a-zA-Z_][a-zA-Z0-9_]*))*>)?\\(",
            "captures": {
                "2": {
                    "name":"entity.name.type.yo"
                },
                "3": {
                    "name":"entity.name.function.yo",
                    "patterns": [{
                        "match": "static_cast|reinterpret_cast",
                        "name":"keyword.control.other.cast.yo"
                    }]
                },
                "4": { "name": "keyword.operator.yo"},
                "5": { "patterns": [{ "include": "#type" }] },
                "7": { "patterns": [{ "include": "#type" }] }
            }
        },
        {
            "name": "keyword.operator.yo",
            "match": "[+\\-*/~|&]"
        },
        { "include": "#var_decl" }
    ],
    "repository": {
        "keywords": {
            "name": "keyword.control.yo",
            "match": "\\b(use|if|else|match|in|while|for|return|true|false)\\b"
        },
        "line_comment": {
            "comment": "Comments",
            "name": "comment.line.double-slash.yo",
            "match": "//.*\\n"
        },
        "block_comment": {
            "name":"comment.block.yo",
            "match": "/\\*.*?\\*/"
        },
        "strings": {
            "name": "string.quoted.double.yo",
            "begin": "b?r?\"",
            "end": "\"",
            "patterns": [{
                "name": "constant.character.escape.yo",
                "match": "\\\\."
            }]
        },
        "type": {
            "match": "([*&]*)\\s*(mut)?\\s*((void|bool|u8|u16|u32|u64|i8|i16|i32|i64|i64|f64)|([a-zA-Z_][a-zA-Z0-9_]*))",
            "captures": {
                "1": { "name": "keyword.operator.yo" },
                "2": { "name": "keyword.control.yo" },
                "4": { "name": "storage.type.yo" },
                "5": { "name": "entity.name.type.yo" }
            }
        },
        "self": {
            "name": "variable.language.yo",
            "match": "\\bself\\b"
        },
        "var_decl": {
            "match": "\\b(let\\s+)?([a-zA-Z_][a-zA-Z0-9_]*)\\s*(:\\s*(\\**[a-zA-Z_][a-zA-Z0-9_]*))?",
            "captures": {
                "1": { "name": "keyword.control.yo" },
                "4": { "patterns": [{ "include": "#type"}] }
            }
        },
        "attributes": {
            "begin": "#\\[",
            "end": "\\]",
            "patterns": [{
                "match": "[a-zA-Z_]+",
                "name": "entity.other.attribute-name"
            }]
        }
    }
}