// io module

// WIP. Does not work yet

use "std/string";

struct File {
    _handle: int
};

impl File {
    fn read(self: File, length: int): int {
        // TODO
    }

    fn close(self: File): void {
        io::_close(self._handle);
        runtime::free(self as int);
    }
}

impl io {
    //static fn open(path: String, mode: String): File {
    //    val _handle: int = io::_open(path, mode);
    //    io::printf("_handle: %n", [@_handle]);
    //    //ret File::init(_handle); // TODO re-enable initializer generation for structs
    //}
}

impl io {
    static fn printi(arg: int): void {
        runtime::_printi(arg);
    }

    static fn printd(arg: double): void {
        runtime::_printd(arg);
    }

    static fn print(arg: String): void {
        runtime::_print(arg);
    }

    #[variadic]
    static fn printf(format: String, args: Array): void {
        io::printf_v(format, args);
    }

    static fn printf_v(format: String, args: Array): void {
        // TODO call description for non-string args passed as '%s'
        // This probably means that we need to parse the format string here insted of in Runtime.swift
        //args = args.map(|element| -> {
        //    val metatype = runtime::typeof(element);
        //    if metatype.name.isEqualToString("String") {
        //        ret element;
        //    }
        //    ret Object::description(element);
        //});
        io::print(String::format_v(format, args));
    }
}
