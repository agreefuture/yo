use ":std/intrinsics";


#[always_inline]
fn operator + <T> (lhs: T, rhs: T) -> T {
    return __add(lhs, rhs);
}

#[always_inline]
fn operator - <T> (lhs: T, rhs: T) -> T {
    return __sub(lhs, rhs);
}

#[always_inline]
fn operator * <T> (lhs: T, rhs: T) -> T {
    return __mul(lhs, rhs);
}

#[always_inline]
fn operator / <T> (lhs: T, rhs: T) -> T {
    return __div(lhs, rhs);
}

#[always_inline]
fn operator % <T> (lhs: T, rhs: T) -> T {
    return __mod(lhs, rhs);
}

#[always_inline]
fn operator & <T> (lhs: T, rhs: T) -> T {
    return __and(lhs, rhs);
}

#[always_inline]
fn operator | <T> (lhs: T, rhs: T) -> T {
    return __or(lhs, rhs);
}

#[always_inline]
fn operator ^ <T> (lhs: T, rhs: T) -> T {
    return __xor(lhs, rhs);
}

#[always_inline]
fn operator << <T> (lhs: T, rhs: T) -> T {
    return __shl(lhs, rhs);
}

#[always_inline]
fn operator >> <T> (lhs: T, rhs: T) -> T {
    return __shr(lhs, rhs);
}



#[always_inline]
fn operator == <T>(lhs: T, rhs: T) -> bool {
    return __eq(lhs, rhs);
}

#[always_inline]
fn operator != <T>(lhs: T, rhs: T) -> bool {
    return !(lhs == rhs);
}

#[always_inline]
fn operator < <T> (lhs: T, rhs: T) -> bool {
    return __lt(lhs, rhs);
}

#[always_inline]
fn operator > <T> (lhs: T, rhs: T) -> bool {
    return rhs < lhs;
}


#[always_inline]
fn operator <= <T>(lhs: T, rhs: T) -> bool {
    return !(lhs > rhs);
}

#[always_inline]
fn operator >= <T>(lhs: T, rhs: T) -> bool {
    return !(lhs < rhs);
}


// Pointer arithmetic

#[always_inline]
fn operator + <T> (lhs: *T, rhs: size_t) -> *T {
    return reinterpret_cast<*T>(reinterpret_cast<uintptr_t>(lhs) + sizeof<T>() * rhs);
}

#[always_inline]
fn operator + <T> (lhs: i64, rhs: *T) -> *T {
    return rhs + lhs;
}


#[always_inline]
fn operator - <T> (lhs: *T, rhs: size_t) -> *T {
    return reinterpret_cast<*T>(reinterpret_cast<uintptr_t>(lhs) - sizeof<T>() * rhs);
}

#[always_inline]
fn operator - <T> (lhs: i64, rhs: *T) -> *T {
    return rhs - lhs;
}
