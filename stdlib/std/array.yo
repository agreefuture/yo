type Array(count: int, _allocatedLength: int, _backing: int[]);


impl Array {
    static fn new(): Array {
        val array: Array;

        array = Array::init(0, 1, runtime::alloc(1));
        ret array;
    }

    fn add(self: Array, object: int): int {
        self._backing[self.count] = object;
        self.count = self.count + 1;
        ret self.count;
    }

    fn get(self: Array, index: int): int {
        if index < 0 || index > (self.count - 1) {
            ret -1; // TODO throw an error or exit the program
        }
        ret self._backing[index];
    }

    fn length(self: Array): int {
        ret self.count;
    }

    fn dealloc(self: Array): int {

    }
}
