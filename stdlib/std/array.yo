type Array(count: int, _allocatedLength: int, _backing: int[]);


impl Array {
    static fn new(): Array {
        val array: Array;

        array = Array::init(0, 1, runtime::alloc(1));
        ret array;
    }

    fn add(self: Array, object: int): int {
        if self.count == self._allocatedLength {
            // array is full, we need to switch to a bigger backing
            
            // TODO come up w/ some clever algorithm determining the new backing length?
            val newLength: int = self._allocatedLength + 10;
            val newBacking: int[] = runtime::alloc(newLength);

            val idx: int = 0;
            while idx < self.count {
                newBacking[idx] = self._backing[idx];
                idx += 1;
            }

            runtime::free(self._backing);
            self._backing = newBacking;
            self._allocatedLength = newLength;
        }

        self._backing[self.count] = object;
        self.count = self.count + 1; // TODO make this `self.count += 1;`
        ret self.count;
    }

    fn get(self: Array, index: int): int {
        if index < 0 || index > (self.count - 1) {
            ret -1; // TODO throw an error or exit the program
        }
        ret self._backing[index];
    }

    fn length(self: Array): int {
        ret self.count;
    }

    fn dealloc(self: Array): int {

    }
}
