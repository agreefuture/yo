use ":std/core";
use ":std/memory";
use ":std/range";

struct ArrayIterator<Element> {
    array: &Array<Element>,
    idx: i64
}

impl<Element> ArrayIterator<Element> {
    fn init(self: &Self, array: &Array<Element>) {
        self.init(array, 0);
    }

    fn hasNext(self: &Self) -> bool {
        return self.idx < self.array.size;
    }

    fn next(self: &Self) -> &Element {
        let &elem = self.array[self.idx];
        self.idx += 1;
        return elem;
    }
}



struct Array<Element> {
    data: *Element,
    size: i64, // TODO rename to count?
    capacity: i64
}

impl<Element> Array<Element> {
    fn init(self: &Self) {
        self.data = alloc<Element>(10);
        self.capacity = 10;
    }

    fn init(self: &Self, other: &Array<Element>) {
        self.capacity = other.capacity;
        self.data = alloc<Element>(cast<size_t>(self.capacity));
        while self.size < other.size {
            self._constructInPlace(self.size, other[self.size]);
            self.size += 1;
        }
    }

    fn operator [] (self: &Self, index: i64) -> &Element {
        assert((0..<self.size).contains(index), "index out of bounds");
        return self.data[index];
    }

    fn iterator(self: &Self) -> ArrayIterator<Element> {
        return ArrayIterator<Element>(self);
    }


    fn append(self: &Self, element: Element) {
        if self.size >= self.capacity - 2 {
            self._resize(25); // TODO dynamically calculate growth factor!
        }
        self._constructInPlace(self.size, element);
        self.size += 1;
    }

    
    fn remove(self: &Self, index: i64) {
        if __is_destructible<Element>() {
            self[index].__dealloc();
        }
        for idx in index..<self.size {
            memcpy(
                bitcast<*i8>(self.data + cast<size_t>(idx)),
                bitcast<*i8>(self.data + cast<size_t>(idx) + 1),
                sizeof<Element>()
            );
        }
        self.size -= 1;

        // TODO shrink if necessary?
    }


    // Inserts a new element, invoking the copy constructor if necessary
    fn _constructInPlace(self: &Self, index: i64, element: &Element) {
        if __is_constructible<Element>() {
            self.data[index].init(element);
        } else {
            self.data[index] = element;
        }
    }

    
    fn _resize(self: &Self, diff: i64) {
        let ptr = alloc<Element>(cast<size_t>(self.capacity + diff));
        memcpy(
            bitcast<*i8>(ptr),
            bitcast<*i8>(self.data),
            cast<size_t>(self.size) * sizeof<Element>()
        );
        dealloc(self.data);
        self.data = ptr;
    }


    /// Filter the array in-place, removing all elements which do not match the predicate
    fn filter<F>(self: &Self, f: F) {
        let indices = Array<i64>();
        for index in 0..<self.size {
            if !f(self[index]) {
                indices.append(index);
            }
        }
        for idx in 0..<indices.size {
            self.remove(indices[indices.size - idx - 1]);
        }
    }


    fn filtered<F>(self: &Self, f: F) -> Array<Element> {
        let matched = Array<Element>();
        for &elem in self {
            if f(elem) {
                matched.append(elem);
            }
        }
        return matched;
    }


    /// Returns true if the array contains the element
    fn contains(self: &Self, element: Element) -> bool {
        for &elem in self {
            if elem == element {
                return true;
            }
        }
        return false;
    }


    /// Returns true if the array contains an element which matches the predicate
    fn contains<F>(self: &Self, f: F) -> bool {
        for &elem in self {
            if f(elem) {
                return true;
            }
        }
        return false;
    }


    fn map<F>(self: &Self, f: F) -> Array<decltype(f(self.data[0]))> {
        let mapped = Array<decltype(f(self.data[0]))>();
        for &elem in self {
            mapped.append(f(elem));
        }
        return mapped;
    }


    fn dealloc(self: &Self) {
        if __is_destructible<Element>() {
            for &elem in self {
                elem.__dealloc();
            }
        }
        dealloc(self.data);
    }
}


fn operator == <T>(lhs: &Array<T>, rhs: &Array<T>) -> bool {
    if lhs.size != rhs.size {
        return false;
    }
    if lhs.data == rhs.data {
        return true;
    }

    for idx in 0..<lhs.size {
        if lhs[idx] != rhs[idx] {
            return false;
        }
    }
    return true;
}

