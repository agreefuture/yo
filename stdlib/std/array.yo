type Array(count: int, backing: int[]);

// TODO make the array automatically grow
impl Array {
    static fn new(): Array {
        val array: Array;

        array = Array::init(0, runtime::alloc(3));
        ret array;
    }

    fn add(self: Array, object: int): int {
        self.backing[self.count] = object;
        self.count = self.count + 1;
        ret self.count;
    }

    fn get(self: Array, index: int): int {
        if index < 0 || index > (self.count - 1) {
            ret -1; // TODO throw an error or exit the program
        }
        ret self.backing[index];
    }
}
