use ":std/core";

/// An inclusive interval from a lower bound to an upper bound
///
/// ClosedRange objects can be constructed either using
/// the `ClosedRange::{exclusive|inclusive}` static methods,
/// or via the `..<` and `...` operators
struct ClosedRange<T> {
    lowerBound: T,
    upperBound: T
}


impl<T> ClosedRange<T> {
    fn init(self: &Self, lowerBound: T, upperBound: T) {
        assert(lowerBound <= upperBound);
        self.lowerBound = lowerBound;
        self.upperBound = upperBound;
    }
}


impl<T> ClosedRange<T> {
    fn contains(self: &Self, value: T) -> bool {
        return self.lowerBound <= value && value <= self.upperBound;
    }

    fn iterator(self: &Self) -> ClosedRangeIterator<T> {
        return ClosedRangeIterator<T>(self.lowerBound, self.upperBound);
    }
}


struct ClosedRangeIterator<T> {
    lowerBound: T,
    upperBound: T
}

impl<T> ClosedRangeIterator<T> {
    fn init(self: &Self, lowerBound: T, upperBound: T) {
        assert(lowerBound <= upperBound);
        self.lowerBound = lowerBound;
        self.upperBound = upperBound;
    }

    fn hasNext(self: &Self) -> bool {
        return self.lowerBound <= self.upperBound;
    }

    fn next(self: &Self) -> T {
        let value = self.lowerBound;
        self.lowerBound += 1;
        return value;
    }
}


fn operator ..< <T> (lowerBound: T, upperBound: T) -> ClosedRange<T> {
    return ClosedRange<T>(lowerBound, upperBound - 1);
}

fn operator ... <T> (lowerBound: T, upperBound: T) -> ClosedRange<T> {
    return ClosedRange<T>(lowerBound, upperBound);
}
