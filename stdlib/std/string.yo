use "std/array";


struct String {
    _backing: ref i8
};

impl String {
    fn length(self: String): int {
        ret runtime::_strlen(self._backing);
    }


    fn appending(self: String, other: String): String {
        ret String::format("%s%s", self, other);
        //val self_length = self.length();
        //val other_length = other.length();
        //val newLength: int = self_length + other_length;

        //val newBacking: int = runtime::alloc(newLength + 1);
        //newBacking[0] = newLength;

        //runtime::copy_array(self._backing, 1, newBacking, 1, self_length);
        //runtime::copy_array(other._backing, 1, newBacking, self_length + 1, other_length);

        //ret String::init(newBacking);

    }

    fn copy(self: String): String {
        ret String::format("%s", self);
        //val length = self.length() + 1;

        //val newBacking = runtime::alloc(length);
        //runtime::copy_array(self._backing, 0, newBacking, 0, length);

        //ret String::init(newBacking);
    }

    fn hashValue(self: String): int {
        ret runtime::_hashString(self);
    }


    fn isEqualToString(self: String, other: String): bool {
        if self.length() != other.length() {
            ret false;
        }

        for i in 0..<self.length() {
            if self._backing[i] != other._backing[i] {
                ret false;
            }
        }
        ret true;
    }

    fn isEqualTo(self: String, other: id): bool {
        // Make sure borh are strings
        if runtime::typeof(self) != runtime::typeof(other) {
            ret false;
        }
        ret self.isEqualToString(other);
    }


    fn description(self: String): String {
        ret self;
    }

    fn debugDescription(self: String): String {
        ret String::init(runtime::_stringDebugDescription(self));
    }


    fn dealloc(self: String): void {
        runtime::free(self._backing as int);
    }


    #[variadic]
    static fn format(format: String, args: Array): String {
        ret String::format_v(format, args);
    }


    static fn format_v(format: String, args: Array): String {
        ret String::init(runtime::__format(format, args));
    }
}
