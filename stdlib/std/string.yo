use ":C/string";
use ":std/memory";

struct String {
    ptr: *i8,
    len: size_t
}

impl String {
    /// Initialize a new String from a char pointer
    /// The length of the String will be determined by the first null byte found
    fn init(self: &Self, ptr: *i8) {
        self.ptr = strdup(ptr);
        self.len = strlen(ptr);
    }

    /// Initialize a new String with the first `len` characters pointed to by `ptr`
    fn init(self: &Self, ptr: *i8, len: size_t) {
        self.ptr = alloc<i8>(len);
        memcpy(self.ptr, ptr, len);
        self.len = len;
    }

    /// Initialize a String by copying another String's contents
    fn init(self: &Self, other: &String) {
        self.ptr = strdup(other.ptr);
        self.len = other.len;
    }

    fn c_str(self: &Self) -> *i8 {
        return self.ptr;
    }

    fn length(self: &Self) -> size_t {
        return self.len;
    }

    fn append(self: &Self, other: String) {
        let newLength = self.len + other.len;
        self.ptr = realloc(self.ptr, newLength + 1);
        memcpy(self.ptr + self.len, other.ptr, other.len);
        self.ptr[newLength] = '\0';
        self.len = newLength;
    }

    fn operator [] (self: &Self, index: i64) -> &i8 {
        return self.ptr[index];
    }

    fn dealloc(self: &Self) {
        free(self.ptr);
    }
}


// MARK: Comparisons

fn operator == (lhs: &String, rhs: &String) -> bool {
    if lhs.length() != rhs.length() {
        return false;
    }
    if lhs.ptr == rhs.ptr {
        return true;
    }
    return strcmp(lhs.ptr, rhs.ptr) == 0;
}

fn operator == (lhs: *i8, rhs: &String) -> bool {
    return lhs == rhs.ptr || strcmp(lhs, rhs.ptr) == 0;
}

fn operator == (lhs: &String, rhs: *i8) -> bool {
    return rhs == lhs;
}


// MARK: Debugging

impl String {
    fn print_desc(self: &Self) {
        printf(b"[String ptr: %p len: %lli text: %s]\n", self.ptr, self.len, self.ptr);
    }
}
