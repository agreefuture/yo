use "std/runtime";
use "std/array";

type String(_backing: int);

impl String {
    fn length(self: String): int {
        ret self._backing[0];
    }


    fn appending(self: String, other: String): String {
        val newLength: int = self.length() + other.length();

        val newBacking: int = runtime::alloc(newLength + 1);
        newBacking[0] = newLength;

        Array::_copy(self._backing, 1, newBacking, 1, self.length());
        Array::_copy(other._backing, 1, newBacking, self.length() + 1, other.length());

        ret String::init(newBacking);

    }

    fn hashValue(self: String): int {
        ret runtime::_hashString(self);
    }


    fn isEqualToString(self: String, other: String): bool {
        val length = self.length();

        for i in 0..<length {
            if self._backing[i] != other._backing[i] {
                ret false;
            }
        }
        ret true;
    }


    fn dealloc(self: String): void {
        runtime::free(self._backing);
    }

    static fn format(fmt: String, args: Array): String {
        ret String::init(runtime::__format(fmt, args));
    }
}
