// runtime.yo

use "std/object";
use "std/string";

fn NotYetImplemented(): void {
    runtime::fatalError("not yet implemented");
}

static _is_deallocating_bit: int = 38;
static _is_marked_for_release_bit: int = 38;

impl runtime {

    // Note: type ids are not guaranteed to be the same across different compilations of the same program
    #[disable_arc]
    static fn getTypeId(obj: any): int {
        ret obj[0] & 0xfffff;
    }


    #[disable_arc]
    static fn isObject(obj: any): bool {
        if obj == 0 {
            ret false;
        }

        if obj % 2 == 0 {
            if obj[0] == 0 {
                ret false;
            }
            ret true;
        }

        ret false;
    }



    //
    // Reference Counting
    //

    // Increment an object's retain count by 1
    #[disable_arc]
    static fn retain(obj: any): any {
        if !runtime::isObject(obj) {
            ret obj;
        }

        if runtime::isMarkedForRelease(obj) {
            runtime::unmarkForRelease(obj);
            ret obj;
        }

        ret runtime::_setRetainCount(obj, runtime::getRetainCount(obj) + 1);
    }


    // Decrement an object's retain count by 1
    // If the object's new retain count is 0,
    // we call the object's dealloc method and free it from the heap
    #[disable_arc]
    static fn release(obj: any): any {
        if !runtime::isObject(obj) {
            ret obj;
        }

        if runtime::isMarkedForRelease(obj) {
            // we reach here when releasing the unused return vslue from a function call returning a complex object
            runtime::unmarkForRelease(obj);
        }

        if runtime::getRetainCount(obj) == 1 {
            // the object is already in the process of being deallocated, so we'll just ignore this release call
            if runtime::is_deallocating(obj) {
                ret obj;
            }

            runtime::set_is_deallocating(obj);
            val dealloc_fn: fn<(any): void> = runtime::_getDeallocAddress(obj) as any;
            dealloc_fn(obj);
            runtime::free(obj);
        } else {
            runtime::_setRetainCount(obj, runtime::getRetainCount(obj) - 1);
        }
        ret obj;
    }

    // 0000|00000000000000000000|00000000000000000000|00000000000000000000
    // 0000|dddddddddddddddddddd|rrrrrrrrrrrrrrrrrrrr|tttttttttttttttttttt
    // ----|--------------------|--------------------|--------------------
    // 6666|55555555554444444444|33333333332222222222|11111111110000000000
    // 3210|98765432109876543210|98765432109876543210|98765432109876543210


    #[disable_arc]
    static fn markForRelease(obj: any): any {
        if !runtime::isObject(obj) {
            ret obj;
        }

        // make sure the same object isn't marked for release twice
        if runtime::isMarkedForRelease(obj) {
            runtime::fatalError("Fatal Error: object is already marked for release");
        }

        obj[0] = obj[0] | (1 << _is_marked_for_release_bit);
        ret obj;
    }

    // newValue should be 0 or 1, everything else is UB
    #[disable_arc]
    static fn unmarkForRelease(obj: any): any {
        if !runtime::isObject(obj) {
            ret obj;
        }

        obj[0] = obj[0] & ~(1 << _is_marked_for_release_bit);
        ret obj;
    }

    #[disable_arc]
    static fn isMarkedForRelease(obj: any): bool {
        if !runtime::isObject(obj) {
            ret false;
        }

        val bit: int = obj[0] & (1 << _is_marked_for_release_bit);
        if bit == 0 {
            ret false;
        }
        ret true;
    }

    #[disable_arc]
    static fn is_deallocating(obj: any): bool {
        if !runtime::isObject(obj) {
            ret false;
        }
        val bit: int = obj[0] & (1 << 38);
        if bit == 0 {
            ret false;
        }
        ret true;
    }

    #[disable_arc]
    static fn set_is_deallocating(obj: any): void {
        if !runtime::isObject(obj) {
            ret obj;
        }

        obj[0] = obj[0] & ~(1 << 38);
        ret obj;
    }


    #[disable_arc]
    static fn _getDeallocAddress(obj: any): int {
        ret obj[0] >> 40;
    }


    #[disable_arc]
    static fn _setRetainCount(obj: any, newValue: int): any {
        val typeId = runtime::getTypeId(obj);
        val deallocAddress = runtime::_getDeallocAddress(obj);

        obj[0] = (deallocAddress << 40);
        obj[0] = obj[0] | (newValue << 20);
        obj[0] = obj[0] | typeId;

        //obj[0] = (deallocAddress << 40) | (newValue << 20) | typeId;

        ret obj;
    }


    #[disable_arc]
    static fn getRetainCount(obj: any): int {
        val retainCount: int = obj[0] & 0xfffff00000;
        ret retainCount >> 20;
    }
}


impl runtime {
    // Runtime helper to create a primitive array from an array constant containing only numbers
    // (ie `{1, 2, 3, 4}`)
    // Because primitive array literals consisting only of numbers are stored the same way
    // as complex array literals consisting only of numbers, we have to drop the first element (the size)
    // More information in `BytecodeCompiler.handle(arrayLiteral:)`
    static fn _primitiveArrayFromConstant(input: int): int {
        val size = input[0];
        val array = runtime::alloc(size);

        runtime::copy_array(input, 1, array, 0, size);
        runtime::free(input);

        ret array;
    }

    // Basically java's `Syatem.arraycopy`
    static fn copy_array(source: int, sourceIndex: int, destination: int, destinationIndex: int, length: int): void {
        for i in 0..<length {
            destination[destinationIndex + i] = source[sourceIndex + i];
        }
    }
}
