// std/number


enum _NumberType {
    integer,
    bool,
    double
};

struct Number {
    _value: any,
    _type: _NumberType
};

impl Number {

    static fn fromInt(value: int): Number {
        return Number::init(value, _NumberType.integer);
    }


    static fn fromBoolean(value: bool): Number {
        return Number::init(value, _NumberType.bool);
    }


    static fn fromDouble(value: double): Number {
        return Number::init(value, _NumberType.double);
    }


    fn intValue(self: Number): int {
        if self._type == 0 {
            return self._value;
        }
        return (self._value as double) as int;
    }


    fn doubleValue(self: Number): double {
        if self._type == 1 {
            return self._value;
        }
        return (self._value as int) as double;
    }


    fn hashValue(self: Number): int {
        return ((self._value as int) << 2) | (self._type as int);
    }


    fn description(self: Number): String {
        return String::format("%n", self);
    }
}
