#[intrinsic] fn __trap();
#[intrinsic] fn __typename<T>() -> *i8;

#[intrinsic] fn __is_same<T, U>() -> bool;
#[intrinsic] fn __is_pointer<T>() -> bool;

#[intrinsic] fn __add<T>(T, T) -> T;
#[intrinsic] fn __sub<T>(T, T) -> T;
#[intrinsic] fn __mul<T>(T, T) -> T;
#[intrinsic] fn __div<T>(T, T) -> T;
#[intrinsic] fn __mod<T>(T, T) -> T;

// bitwise AND
#[intrinsic] fn __and<T>(T, T) -> T;
// bitwise OR
#[intrinsic] fn __or<T>(T, T) -> T;

#[intrinsic] fn __xor<T>(T, T) -> T;
#[intrinsic] fn __shl<T>(T, T) -> T;
#[intrinsic] fn __shr<T>(T, T) -> T;

#[intrinsic] fn __eq<T>(T, T) -> bool;
#[intrinsic] fn __gt<T>(T, T) -> bool;
#[intrinsic] fn __lt<T>(T, T) -> bool;

// short-circuited logical AND
#[intrinsic] fn __land(bool, bool) -> bool;
// short-circuited logical OR
#[intrinsic] fn __lor(bool, bool) -> bool;
