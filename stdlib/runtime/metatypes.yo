// runtime/metatypes

use "std/string";

#[disable_metadata]
struct Type {
    id: int,
    name: String,
    dealloc_fn: int
};


impl runtime {
    #[disable_arc]
    static fn typeof(obj: any): Type {
        // the upper 32 bit of an object's first field are a pointer to a pointer to the actual metatype
        // see the source code for more information TODO link to source code
        val metatype_ptr = obj[0] >> 32;
        ret metatype_ptr[0] as Type;
    }


    // unsafely invoke a method
    #[variadic]
    static fn msgSend(target: id, selector: String, argc: int, argv: int): any {
        if target == 0 {
            ret 0;
        }

        val type = runtime::typeof(target);
        selector = String::format("%s_I%s", type.name, selector);

        val addr = runtime::_lookupAddress(selector);

        if addr == -1 {
            runtime::fatalError(String::format("Unable to invoke %s: unrecognized selector", selector));
        }

        val argv_with_self = runtime::alloc((argc + 1) * 8);
        argv_with_self[0] = target;
        if argc > 0 {
            runtime::copy_array(8, argv, 0, argv_with_self, 1, argc);
        }
        runtime::free(argv);

        val retval = runtime::_invoke(addr, argc + 1, argv_with_self);
        runtime::free(argv_with_self);

        ret retval;
    }
}
